buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
          name 'OpenMods Third Party'
          url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'net.thesilkminer.gradle.translationchecker:TranslationChecker:1.1'
    }
}

repositories {
    maven {
        name "OpenMods"
        url "https://repo.openmods.info/artifactory/openmods"
    }
}

configurations {
    mergeJars

    compile {
         extendsFrom mergeJars
    }
}

dependencies {
    mergeJars "openeye:OpenEye-protocol:1.1.1"
}

apply plugin: 'net.minecraftforge.gradle.forge'

archivesBaseName = 'OpenEye'
version = mc_ver + "-" + mod_version

ext.env = System.getenv()
if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

ext.in_jenkins = (env.BUILD_TAG != null) // If this works, we'll assume we're in Jenkins atleast.

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()

if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = "run"

    replaceIn 'openeye/Mod.java'
    replace "@VERSION@", mod_version

    mappings = mcp_mappings
}

processResources {
    inputs.property "version", mod_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':mod_version, 'mc_version':mc_ver
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'openeye.CorePlugin',
                   'Git-Branch': branch,
                   'Git-Hash': hash,
                   'Jenkins-Build': in_jenkins

        if (in_jenkins) {
            attributes 'Jenkins-Tag': env.BUILD_TAG, 'Jenkins-ID': env.BUILD_ID
        }
    }

    from configurations.mergeJars.collect { it.isDirectory() ? it : zipTree(it) }
}

task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openeye"
}

task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openeye"
    dryRun = true
}

task wrapper (type: Wrapper) {
    gradleVersion = "2.11"
}

